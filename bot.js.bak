const { Client, Intents, MessageEmbed, MessageActionRow, MessageButton, Collection,   } = require('discord.js');
const fs = require('fs');


const client = new Client({ 
  intents: [ 
    Intents.FLAGS.GUILDS,
    Intents.FLAGS.GUILD_MEMBERS,
    Intents.FLAGS.GUILD_MESSAGES,
    Intents.FLAGS.DIRECT_MESSAGES, 
    Intents.FLAGS.GUILD_MESSAGE_REACTIONS,
  ]
});

client.setMaxListeners(15);


  // RESTARTER

  client.on('messageCreate', (message) => {
  });
  client.on('error', (error) => {
    console.error('Achtung! Ein Fehler ist aufgetreten:', error);
    console.log('Der Bot wird neu gestartet...');
    startBot();
  });

  const createCrashLog = (error) => {
    const crashLog = `Crash Log - ${new Date().toLocaleString()}\n\n${error.stack}\n\n`;
  
    fs.appendFile('crash.log', crashLog, (err) => {
      if (err) {
        console.error('Fehler beim Erstellen des Crash-Logs:', err);
      } else {
        console.log('Crash-Log erfolgreich erstellt: crash.log');
      }
    });
  };
  

  // AKTIVITÄT


  const activityCommandData = {
    name: 'activity',
    description: 'Ändert die Aktivität des Bots',
    options: [
      {
        name: 'activity_type',
        description: 'Der Aktivitätstyp',
        type: 'STRING',
        required: true,
        choices: [
          { name: 'Spielen', value: 'spielen' },
          { name: 'Hören', value: 'hören' },
          { name: 'Gucken', value: 'gucken' },
        ],
      },
      {
        name: 'activity_name',
        description: 'Der Name der Aktivität',
        type: 'STRING',
        required: true,
      },
    ],
  };
  
  const getActivityType = (activityType) => {
    switch (activityType) {
      case 'spielen':
        return 'PLAYING';
      case 'hören':
        return 'LISTENING';
      case 'gucken':
        return 'WATCHING';
      default:
        return 'PLAYING';
    }
  };
  
  const defaultActivities = {};
  
  client.once('ready', async () => {
    console.log(`Bot ist eingeloggt als ${client.user.tag}`);
  
    try {
      const guild = await client.guilds.fetch(guildId);
      if (!guild) {
        console.log('Die angegebene Guild-ID ist ungültig.');
        return;
      }
  
      defaultActivities.spielen = { name: 'Ball', type: 'PLAYING' };
      defaultActivities.hören = { name: 'Musik', type: 'LISTENING' };
      defaultActivities.gucken = { name: 'Videos', type: 'WATCHING' };
  
      for (const activityType in defaultActivities) {
        const activity = defaultActivities[activityType];
        await client.user.setActivity(activity.name, { type: activity.type });
      }
  
      await guild.commands.create(activityCommandData);
  
      console.log('Befehl /activity erfolgreich registriert!');
  
      setInterval(() => {
        const activities = Object.values(defaultActivities);
        const randomActivity = activities[Math.floor(Math.random() * activities.length)];
  
        client.user.setActivity(randomActivity.name, { type: randomActivity.type });
      }, 120000);
    } catch (error) {
      console.error('Fehler beim Starten des Bots:', error);
    }
  });
  
  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;
  
    if (interaction.commandName === 'activity') {
      const activityType = interaction.options.getString('activity_type');
      const activityName = interaction.options.getString('activity_name');
  
      if (!activityType) {
        await interaction.reply({ content: 'Du musst den Aktivitätstyp angeben.', ephemeral: true });
        return;
      }
  
      if (!activityName) {
        await interaction.reply({ content: 'Du musst den Namen der Aktivität angeben.', ephemeral: true });
        return;
      }
  
      const activity = {
        type: getActivityType(activityType),
        name: activityName,
      };
  
      try {
        defaultActivities[activityType.toLowerCase()] = activity; 
        await client.user.setActivity(activity.name, { type: activity.type });
        await interaction.reply({
          content: `Aktivität wurde erfolgreich zu ${activityType} ${activityName} geändert.`,
          ephemeral: true,
        });
      } catch (error) {
        console.error('Fehler beim Ändern der Aktivität:', error);
        await interaction.reply({
          content: 'Es ist ein Fehler aufgetreten. Die Aktivität konnte nicht geändert werden.',
          ephemeral: true,
        });
      }
    }
  });
  

// WILLKOMMENSNACHRICHT

client.on('guildMemberAdd', member => {
  const welcomeChannelId = '1086017443350204446';
  const welcomeChannel = member.guild.channels.cache.get(welcomeChannelId);

  if (welcomeChannel) {
    const welcomeEmbed = new MessageEmbed()
      .setColor('#50d281')
      .setTitle('Willkommen!')
      .setDescription(`Willkommen ${member} auf unserem Server! \n Respektiere und Akzeptiere bitte die Regeln bevor du den Server weiter begutachtest! \n Willkommen an Board.`)
      .setThumbnail(member.user.displayAvatarURL())
      .setTimestamp()
      .setFooter('.boy by .denzn#5412', member.guild.iconURL());

    welcomeChannel.send({ embeds: [welcomeEmbed] })
      .catch(console.error);
  }
});

// VERLASSENNACHRICHT

client.on('guildMemberRemove', member => {
  const goodbyeChannelId = '1086017495997088015';
  const goodbyeChannel = client.channels.cache.get(goodbyeChannelId);
  if (goodbyeChannel) {
    const embed = new MessageEmbed()
      .setTitle('Auf Wiedersehen')
      .setDescription(`${member} hat den Server verlassen.\n Auf Wiedersehen, bis bald!`)
      .setColor('#50d281')
      .setThumbnail(member.user.displayAvatarURL())
      .setTimestamp()
      .setFooter('.boy by .denzn#5412', member.guild.iconURL());
    goodbyeChannel.send({ embeds: [embed] })
      .catch(console.error);
  }
});


// HELPBEFEHL

client.on('ready', async () => {
  try {
    await client.application.commands.set([
      {
        name: 'help',
        description: 'Zeigt eine Liste der verfügbaren Befehle an'
      }
    ]);
    console.log('Befehl /help erfolgreich registriert!');
  } catch (error) {
    console.error('Fehler beim Registrieren des /help-Befehl:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'help') {
    const helpEmbed = new MessageEmbed()
      .setColor('#50d281')
      .setTitle('Hilfe')
      .setDescription('Hier sind die wichtigsten Befehle kategorisch geordnet.')
      .setTimestamp()
      .setFooter({ text: '.boy by .denzn#5412', iconURL: client.user.displayAvatarURL() });

    const commands = [
      { category: 'UNIVERSAL-FUNCTIONS', name: '/verify', description: 'legt deinen Verifizierungs-Kanal fest' },
      { category: 'UNIVERSAL-FUNCTIONS', name: '/announce', description: 'führt eine Ankündigung durch mit deiner Nachricht' },
      { category: 'UNIVERSAL-FUNCTIONS', name: '/activity', description: 'ändert die Aktivität deines BOT' },
      { category: 'UNIVERSAL-FUNCTIONS', name: '/coins', description: 'zeigt dir deine verdienten Münzen an' },
      { category: 'MEMBER-FUNCTIONS', name: '/ban', description: 'bannt ein Mitglied' },
      { category: 'MEMBER-FUNCTIONS', name: '/unban', description: 'entbannt ein Mitglied' },
      { category: 'MEMBER-FUNCTIONS', name: '/kick', description: 'kickt ein Mitglied' },
      { category: 'TO-DO Liste', name: '/list', description: 'zeigt dir deine TO-DO Liste an' },
      { category: 'TO-DO Liste', name: '/add', description: 'fügt einen Eintrag hinzu' },
      { category: 'TO-DO Liste', name: '/remove', description: 'löscht einen fertigen Eintrag' }
    ];

    let currentCategory = '';
    let categoryCommands = '';

    for (const command of commands) {
      const { category, name, description } = command;

      if (category !== currentCategory) {
        if (categoryCommands !== '') {
          helpEmbed.addField(currentCategory, categoryCommands);
          categoryCommands = '';
        }
        currentCategory = category;
      }

      categoryCommands += `${name} - ${description}\n`;
    }

    if (categoryCommands !== '') {
      helpEmbed.addField(currentCategory, categoryCommands);
    }

    await interaction.reply({ embeds: [helpEmbed] });
  }
});

// MUTE

const muteCommandData = {
  name: 'mute',
  description: 'Stummschalten eines Mitglieds',
  options: [
    {
      name: 'member',
      description: 'Das Mitglied, das stummgeschaltet werden soll',
      type: 6, 
      required: true,
    },
  ],
};

client.on('ready', async () => {
  try {
    const guildId = '1028723896163258458';
    await client.api.applications(client.user.id).guilds(guildId).commands.post({
      data: muteCommandData,
    });
    console.log('Befehl /mute erfolgreich registriert!');
  } catch (error) {
    console.error('Fehler beim Registrieren des Befehls /mute:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'mute') {
    if (!interaction.member.permissions.has('MUTE_MEMBERS')) {
      return interaction.reply({
        content: 'Du hast nicht die Berechtigung, Mitglieder stummzuschalten.',
        ephemeral: true,
      });
    }

    const memberOption = options.get('member');
    const member = memberOption.member;

    if (!member) {
      return interaction.reply({
        content: 'Das angegebene Mitglied wurde nicht gefunden.',
        ephemeral: true,
      });
    }

    if (member.roles.cache.some(role => role.name === 'muted')) {
      return interaction.reply({
        content: 'Das Mitglied ist bereits stummgeschaltet.',
        ephemeral: true,
      });
    }

    try {
      const muteRole = interaction.guild.roles.cache.find(role => role.name === 'muted');
      
      if (!muteRole) {
        return interaction.reply({
          content: 'Die Stumm-Rolle wurde nicht gefunden. Bitte erstelle eine Rolle mit dem Namen "Muted".',
          ephemeral: true,
        });
      }
      
      await member.roles.add(muteRole);

      interaction.reply({
        content: `Das Mitglied ${member.displayName} wurde erfolgreich stummgeschaltet.`,
        ephemeral: true,
      });
    } catch (error) {
      console.error('Fehler beim Stummschalten des Mitglieds:', error);
      interaction.reply({
        content: 'Es ist ein Fehler aufgetreten. Das Mitglied konnte nicht stummgeschaltet werden.',
        ephemeral: true,
      });
    }
  }
});

// KICKBEFEHL

client.on('ready', () => {
  console.log('Befehl /kick erfolgreich registriert!');
  client.api.applications(client.user.id).guilds('1028723896163258458').commands.post({
    data: {
      name: 'kick',
      description: 'Kickt einen Benutzer vom Server',
      options: [
        {
          name: 'user',
          description: 'Der Benutzer, der gekickt werden soll',
          type: 6, 
          required: true
        },
        {
          name: 'reason',
          description: 'Der Grund für den Kick',
          type: 3, 
          required: false
        }
      ]
    }
  });
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'kick') {
    if (!interaction.member.permissions.has('KICK_MEMBERS')) {
      return interaction.reply({
        content: 'Du hast nicht die Berechtigung, Mitglieder zu kicken.',
        ephemeral: true
      });
    }

    const user = options.getUser('user');
    const reason = options.getString('reason') || 'Kein Grund angegeben';
    try {
      await interaction.guild.members.kick(user.id, reason);
      interaction.reply({
        content: `Der Benutzer ${user.tag} wurde erfolgreich gekickt.`,
        ephemeral: true
      });
    } catch (error) {
      console.error('Fehler beim Kicken des Benutzers:', error);
      interaction.reply({
        content: 'Es ist ein Fehler aufgetreten. Der Benutzer konnte nicht gekickt werden.',
        ephemeral: true
      });
    }
  }
});


// BANBEFEHL

client.on('ready', () => {
  console.log('Befehl /ban erfolgreich registriert!');
  client.api.applications(client.user.id).guilds('1028723896163258458').commands.post({
    data: {
      name: 'ban',
      description: 'Bannt einen Benutzer vom Server',
      options: [
        {
          name: 'user',
          description: 'Der Benutzer, der gebannt werden soll',
          type: 6,
          required: true
        },
        {
          name: 'reason',
          description: 'Der Grund für den Ban',
          type: 3,
          required: false
        }
      ]
    }
  });
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'ban') {
    if (!interaction.member.permissions.has('BAN_MEMBERS')) {
      return interaction.reply({
        content: 'Du hast nicht die Berechtigung, Mitglieder zu bannen.',
        ephemeral: true
      });
    }

    const user = options.getUser('user');
    const reason = options.getString('reason') || 'Kein Grund angegeben';
    try {
      await interaction.guild.members.ban(user.id, { reason });
      interaction.reply({
        content: `Der Benutzer ${user.tag} wurde erfolgreich gebannt.`,
        ephemeral: true
      });
    } catch (error) {
      console.error('Fehler beim Bannen des Benutzers:', error);
      interaction.reply({
        content: 'Es ist ein Fehler aufgetreten. Der Benutzer konnte nicht gebannt werden.',
        ephemeral: true
      });
    }
  }
});


// UNBANBEFEHL

client.on('ready', () => {
  console.log('Befehl /unban erfolgreich registriert!');
  client.api.applications(client.user.id).guilds('1028723896163258458').commands.post({
    data: {
      name: 'unban',
      description: 'Entbannt einen Benutzer auf dem Server',
      options: [
        {
          name: 'user',
          description: 'Der Benutzer, der entbannt werden soll',
          type: 6,
          required: true
        }
      ]
    }
  });
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'unban') {
    if (!interaction.member.permissions.has('BAN_MEMBERS')) {
      return interaction.reply({
        content: 'Du hast nicht die Berechtigung, Mitglieder zu entbannen.',
        ephemeral: true
      });
    }

    const user = options.getUser('user');

    try {
      await interaction.guild.bans.remove(user.id);
      interaction.reply({
        content: `Der Benutzer ${user.tag} wurde erfolgreich entbannt.`,
        ephemeral: true
      });
    } catch (error) {
      console.error('Fehler beim Entbannen des Benutzers:', error);
      interaction.reply({
        content: 'Es ist ein Fehler aufgetreten. Der Benutzer konnte nicht entbannt werden.',
        ephemeral: true
      });
    }
  }
});

// VERIFY
client.on('ready', () => {
  console.log('Befehl /verify erfolgreich registriert!');
  client.guilds.cache.forEach((guild) => {
    guild.commands.create({
      name: 'verify',
      description: 'Startet den Verifizierungsprozess.',
      options: [
        {
          name: 'channel',
          description: 'Der Verifizierungs-Channel',
          type: 'CHANNEL',
          required: true,
        },
      ],
    });
  });
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'verify') {
    const channel = options.getChannel('channel');
    const verificationChannel = interaction.guild.channels.cache.get(channel.id);

    if (verificationChannel && verificationChannel.type === 'GUILD_TEXT') {
      const embed = new MessageEmbed()
        .setTitle('Verifizierung')
        .setDescription('Klicke auf den Button unten, um dich zu verifizieren.')
        .setColor('#50d281');

      const row = new MessageActionRow().addComponents(
        new MessageButton()
          .setCustomId('verificationButton')
          .setLabel('Verifizieren')
          .setStyle('SUCCESS')
      );

      await interaction.reply({ content: 'Verifizierung gestartet!', ephemeral: true });
      await verificationChannel.send({ embeds: [embed], components: [row] }).then(async (sentMessage) => {
        const filter = (i) => i.customId === 'verificationButton' && i.user.id === interaction.user.id;
        const collector = sentMessage.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (i) => {
          const member = interaction.guild.members.cache.get(i.user.id);
          await member.roles.add('1086029939335249970');

          await sentMessage.delete();

          const verifiedEmbed = new MessageEmbed()
            .setTitle('Verifizierung')
            .setDescription('DU BIST VERIFIZIERT')
            .setColor('#50d281');

          await verificationChannel.send({ embeds: [verifiedEmbed] });

          collector.stop();
        });
      });
    } else {
      await interaction.reply(`Der ausgewählte Kanal ist ungültig oder kein Textkanal.`);
    }
  }
});

// ANNOUNCE

client.on('ready', async () => {
  console.log('Befehl /announce erfolgreich registriert!');
  await client.application.commands.fetch();
  
  client.guilds.cache.forEach((guild) => {
    const command = guild.commands.cache.find((cmd) => cmd.name === 'announce');

    if (!command) {
      guild.commands.create({
        name: 'announce',
        description: 'Sendet eine Nachricht als Embed in einem Channel.',
        options: [
          {
            name: 'channel',
            type: 'CHANNEL',
            description: 'Die ID des Ziel-Channels.',
            required: true,
          },
          {
            name: 'text',
            type: 'STRING',
            description: 'Der Text des Embeds.',
            required: true,
          },
        ],
      });
    }
  });
});

client.on('interactionCreate', (interaction) => {
  if (!interaction.isCommand() || interaction.user.bot) return;

  if (interaction.commandName === 'announce') {
    announce(interaction);
  }
});

async function announce(interaction) {
  const channel = interaction.options.getChannel('channel');
  const text = interaction.options.getString('text');

  if (!channel || channel.type !== 'GUILD_TEXT') {
    return interaction.reply('Ungültiger Channel!');
  }

  const embed = new MessageEmbed()
    .setColor('#50d281')
    .setTitle('Important Updates')
    .setDescription(text)
    .setThumbnail(interaction.guild.iconURL())
    .setTimestamp()
    .setFooter('.boy by .denzn#5412', interaction.guild.iconURL());

  try {
    await channel.send({ embeds: [embed] });
    interaction.reply('Nachricht gesendet!');
  } catch (error) {
    console.error('Fehler beim Senden der Nachricht:', error);
    interaction.reply('Fehler beim Senden der Nachricht!');
  }
}

// CHATCLEAR

const chatclearCommentData = {
  name: 'chatclear',
  description: 'Löscht alle Nachrichten und Interaktionen im Kanal, die weniger als 14 Tage alt sind',
};

client.on('ready', async () => {
  try {
    const guildId = '1028723896163258458';
    await client.api.applications(client.user.id).guilds(guildId).commands.post({
      data: chatclearCommentData,
    });
    console.log('Befehl /chatclear erfolgreich registriert!');
  } catch (error) {
    console.error('Fehler beim Registrieren des Befehls /chatclear:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'chatclear') {
    if (!interaction.member.permissions.has('MANAGE_MESSAGES')) {
      return interaction.reply({
        content: 'Du hast nicht die Berechtigung, Nachrichten zu löschen.',
        ephemeral: true,
      });
    }

    try {
      const currentDate = new Date();
      const twoWeeksAgo = new Date(currentDate.getTime() - (14 * 24 * 60 * 60 * 1000));

      let deletedCount = 0;
      let lastMessageId = null;
      let messages = await interaction.channel.messages.fetch({ limit: 100 });

      while (messages.size > 0) {
        const filteredMessages = messages.filter((message) => message.createdTimestamp >= twoWeeksAgo);

        if (filteredMessages.size === 0) {
          break;
        }

        const messageIds = filteredMessages.map((message) => message.id);
        await interaction.channel.bulkDelete(messageIds);

        deletedCount += filteredMessages.size;
        lastMessageId = messageIds[messageIds.length - 1];

        messages = await interaction.channel.messages.fetch({ limit: 100, before: lastMessageId });
      }

      const interactions = await interaction.channel.fetchWebhooks();
      interactions.forEach(async (webhook) => {
        if (webhook.owner instanceof client.user.constructor) {
          await webhook.delete();
          deletedCount++;
        }
      });

      interaction.reply({
        content: `Es wurden insgesamt ${deletedCount} Nachrichten und Interaktionen gelöscht.`,
        ephemeral: true,
      });
    } catch (error) {
      console.error('Fehler beim Löschen der Nachrichten:', error);
      interaction.reply({
        content: 'Es ist ein Fehler aufgetreten. Die Nachrichten und Interaktionen konnten nicht gelöscht werden.',
        ephemeral: true,
      });
    }
  }
});



// TO-DO
  
const todoList = new Map();

client.once('ready', async () => {
  try {
    const guild = await client.guilds.fetch(guildId);
    if (!guild) {
      console.log('Die angegebene Guild-ID ist ungültig.');
      return;
    }

    const addCommandData = {
      name: 'add',
      description: 'Fügt einen Eintrag zur ToDo-Liste hinzu',
      options: [
        {
          name: 'item',
          description: 'Der Eintrag, der zur ToDo-Liste hinzugefügt werden soll',
          type: 'STRING',
          required: true,
        },
      ],
    };

    const removeCommandData = {
      name: 'remove',
      description: 'Entfernt einen Eintrag von der ToDo-Liste',
      options: [
        {
          name: 'index',
          description: 'Der Index des Eintrags, der entfernt werden soll',
          type: 'INTEGER',
          required: true,
        },
      ],
    };

    const listCommandData = {
      name: 'list',
      description: 'Zeigt die ToDo-Liste an',
    };

    await guild.commands.create(addCommandData);
    await guild.commands.create(removeCommandData);
    await guild.commands.create(listCommandData);

    console.log('Befehl /list erfolgreich registriert!');
    console.log('Befehl /add erfolgreich registriert!');
    console.log('Befehl /remove erfolgreich registriert!');
  } catch (error) {
    console.error('Fehler beim Registrieren der Befehle:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'add') {
    const todoItem = interaction.options.getString('item');

    if (!todoItem || todoItem.trim().length === 0) {
      interaction.reply('Du musst einen Eintrag angeben.');
      return;
    }

    const authorId = interaction.user.id;
    let userTodoList = todoList.get(authorId);

    if (!userTodoList) {
      userTodoList = [];
      todoList.set(authorId, userTodoList);
    }

    userTodoList.push(todoItem);
    interaction.reply(`Eintrag "${todoItem}" wurde zur ToDo-Liste hinzugefügt.`);
  } else if (commandName === 'remove') {
    const index = interaction.options.getInteger('index');

    if (!index || isNaN(index) || index <= 0) {
      interaction.reply('Du musst eine gültige Indexnummer angeben.');
      return;
    }

    const authorId = interaction.user.id;
    const userTodoList = todoList.get(authorId);

    if (!userTodoList || index > userTodoList.length) {
      interaction.reply('Der angegebene Index ist ungültig.');
      return;
    }

    const removedItem = userTodoList.splice(index - 1, 1);
    interaction.reply(`Eintrag "${removedItem}" wurde von der ToDo-Liste entfernt.`);
  } else if (commandName === 'list') {
    const authorId = interaction.user.id;
    const userTodoList = todoList.get(authorId);

    if (!userTodoList || userTodoList.length === 0) {
      interaction.reply('Deine ToDo-Liste ist leer.');
      return;
    }

    const embed = new MessageEmbed()
      .setColor('#50d281')
      .setTitle('ToDo-Liste')
      .setDescription(userTodoList.map((item, index) => `${index + 1}. ${item}`).join('\n'));

    interaction.reply({ embeds: [embed] });
  }
});
  

// WARN

const warnings = new Collection();
const MAX_WARNINGS = 3;
const TEMP_BAN_DURATION = 7;

const warnCommandData = {
  name: 'warn',
  description: 'Verwarnt ein Mitglied',
  options: [
    {
      name: 'member',
      description: 'Das Mitglied, das verwarnt werden soll',
      type: 6,
      required: true,
    },
    {
      name: 'reason',
      description: 'Der Grund für die Verwarnung',
      type: 3,
      required: true,
    },
  ],
};


client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'warn') {
    const member = options.get('member').member;
    const reason = options.get('reason').value;
    const memberWarnings = warnings.get(member.id) || 0;
    warnings.set(member.id, memberWarnings + 1);

    if (memberWarnings + 1 >= MAX_WARNINGS) {
      await member.ban({ days: TEMP_BAN_DURATION, reason: 'Zu viele Verwarnungen' });
      warnings.delete(member.id);

      await interaction.reply({
        content: `${member.user.tag} wurde temporär gebannt für ${TEMP_BAN_DURATION} Tage aufgrund von zu vielen Verwarnungen.`,
        ephemeral: true,
      });
    } else {
      await interaction.reply({
        content: `${member.user.tag} wurde verwarnt. Grund: ${reason}`,
        ephemeral: true,
      });
    }
  }
});

  // COINS
  
  const MAX_COINS_PER_DAY = 50;
  const COINS_RESET_TIME = 24 * 60 * 60 * 1000;
  
  const coinsMap = new Map();
  const lastCoinCollection = new Map();
  const lastMessage = new Map();
  const lastReaction = new Map();
  
  client.once('ready', () => {
    console.log(`Befehl /coins erfolgreich registriert!`);
  
    client.api.applications(client.user.id).commands.post({
      data: {
        name: 'coins',
        description: 'Zeigt die gesammelten Coins an',
      },
    });
  
    client.api.applications(client.user.id).commands.post({
      data: {
        name: 'daily',
        description: 'Erhalte täglich 50 Coins kostenlos',
      },
    });
  });
  
  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;
  
    if (interaction.commandName === 'coins') {
      const memberId = interaction.user.id;
  
      if (coinsMap.has(memberId)) {
        const coins = coinsMap.get(memberId);
        await interaction.reply(`Du hast ${coins} Coins gesammelt!`);
      } else {
        await interaction.reply('Du hast noch keine Coins gesammelt!');
      }
    }
  
    if (interaction.commandName === 'daily') {
      const memberId = interaction.user.id;
  
      if (lastCoinCollection.has(memberId)) {
        const lastCollectionTime = lastCoinCollection.get(memberId);
  
        if (Date.now() - lastCollectionTime > COINS_RESET_TIME) {
          coinsMap.set(memberId, coinsMap.get(memberId) + MAX_COINS_PER_DAY);
          lastCoinCollection.set(memberId, Date.now());
          await interaction.reply('Du hast deine täglichen 50 Coins erfolgreich erhalten!');
        } else {
          const remainingTime = COINS_RESET_TIME - (Date.now() - lastCollectionTime);
          const remainingHours = Math.floor(remainingTime / (60 * 60 * 1000));
          const remainingMinutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));
          const remainingSeconds = Math.floor((remainingTime % (60 * 1000)) / 1000);
          await interaction.reply(`Du hast bereits deine täglichen Coins erhalten. Versuche es in ${remainingHours} Stunden, ${remainingMinutes} Minuten und ${remainingSeconds} Sekunden erneut!`);
        }
      } else {
        coinsMap.set(memberId, MAX_COINS_PER_DAY);
        lastCoinCollection.set(memberId, Date.now());
        await interaction.reply('Du hast deine täglichen 50 Coins erfolgreich erhalten!');
      }
    }
  });
  
  client.on('messageCreate', (message) => {
    const memberId = message.author.id;
  
    if (coinsMap.has(memberId) && lastCoinCollection.has(memberId)) {
      const coins = coinsMap.get(memberId);
      const lastCollectionTime = lastCoinCollection.get(memberId);
  
      if (Date.now() - lastCollectionTime > COINS_RESET_TIME) {
        coinsMap.set(memberId, 0);
        lastCoinCollection.set(memberId, Date.now());
      }
    } else {
      coinsMap.set(memberId, 0);
      lastCoinCollection.set(memberId, Date.now());
    }
  
    if (coinsMap.get(memberId) < MAX_COINS_PER_DAY) {
      coinsMap.set(memberId, coinsMap.get(memberId) + 2);
    }
  
    if (message.attachments.size > 0) {
      const imageCoins = 3;
      if (coinsMap.get(memberId) + imageCoins <= MAX_COINS_PER_DAY) {
        coinsMap.set(memberId, coinsMap.get(memberId) + imageCoins);
      }
    }
  
    if (lastMessage.has(memberId)) {
      const lastMessageTime = lastMessage.get(memberId);
      if (Date.now() - lastMessageTime > COINS_RESET_TIME) {
        coinsMap.set(memberId, coinsMap.get(memberId) + 50);
        lastMessage.set(memberId, Date.now());
      }
    } else {
      coinsMap.set(memberId, coinsMap.get(memberId) + 50);
      lastMessage.set(memberId, Date.now());
    }
  });
  
  client.on('messageReactionAdd', (reaction, user) => {
    if (user.bot) return;
  
    const memberId = user.id;
  
    if (coinsMap.get(memberId) + 1 <= MAX_COINS_PER_DAY) {
      coinsMap.set(memberId, coinsMap.get(memberId) + 1);
    }
  
    if (lastReaction.has(memberId)) {
      const lastReactionTime = lastReaction.get(memberId);
      if (Date.now() - lastReactionTime > COINS_RESET_TIME) {
        coinsMap.set(memberId, coinsMap.get(memberId) + 50);
        lastReaction.set(memberId, Date.now());
      }
    } else {
      coinsMap.set(memberId, coinsMap.get(memberId) + 50);
      lastReaction.set(memberId, Date.now());
    }
  });

const guildId = '1028723896163258458';

client.login('MTAxNjQwODc1MTk2OTk0MzYxMg.GJN1uP.VqPLdhnbEpt_SMIgIJbpF5e2Cqw_zu9-vejNlo');
